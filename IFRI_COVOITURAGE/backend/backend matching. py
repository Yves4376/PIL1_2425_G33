from flask import Flask, request, jsonify
from geopy.distance import geodesic
from datetime import datetime

app = Flask(__name__)

# Base de données temporaire en mémoire
demandes = []

# 🟩 Ajouter une demande
@app.route('/demande', methods=['POST'])
def ajouter_demande():
    data = request.get_json()
    demandes.append(data)
    return jsonify({"message": "Demande ajoutée", "demande": data}), 201

# ✅ Vérifie si les horaires se chevauchent
def horaires_compatibles(h1_debut, h1_fin, h2_debut, h2_fin):
    debut1 = datetime.fromisoformat(h1_debut)
    fin1 = datetime.fromisoformat(h1_fin)
    debut2 = datetime.fromisoformat(h2_debut)
    fin2 = datetime.fromisoformat(h2_fin)
    return max(debut1, debut2) < min(fin1, fin2)

# 🔄 Reçoit une offre et retourne les demandes compatibles
@app.route('/match', methods=['POST'])
def match():
    offre = request.get_json()
    coord_offre = (offre['lat'], offre['lng'])
    matches = []

    for demande in demandes:
        coord_demande = (demande['lat'], demande['lng'])
        distance = geodesic(coord_offre, coord_demande).km

        if distance <= 5:  # Seuil max
            if horaires_compatibles(
                offre['heure_debut'], offre['heure_fin'],
                demande['heure_debut'], demande['heure_fin']
            ):
                matches.append({
                    "demande_id": demande['id'],
                    "distance_km": round(distance, 2),
                    "itineraire": f"{coord_offre} → {coord_demande}",
                    "lat": demande["lat"],
                    "lng": demande["lng"]
                })

    return jsonify(matches), 200

# 🔍 (Optionnel) Voir toutes les demandes
@app.route('/demandes', methods=['GET'])
def liste_demandes():
    return jsonify(demandes), 200

if __name__ == '__main__':
    app.run(debug=True)